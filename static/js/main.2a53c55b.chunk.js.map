{"version":3,"sources":["Input.tsx","utils/validators.ts","services/form.ts","model/formModel.ts","utils/makeId.ts","utils/combineLatestArray.ts","Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","name","value","error","showLabel","disabled","onBlur","onFocus","onChange","Form","Group","as","Col","Label","Control","type","placeholder","required","isInvalid","e","target","Feedback","validateHostname","hostname","match","validateNonEmpty","submitFormMapped","form","Promise","resolve","_reject","setTimeout","isSuccess","errors","undefined","password","confirmPassword","accounts","map","account","sitename","username","submitForm","then","result","i","id","isFormResponseFailureMapped","response","idSection","Math","random","toString","slice","combineLatestArray","items","combineLatest","createInputModel","valueHandler","createHandler","focused","isFocused$","value$","pipe","startWith","shareReplay","isVisited$","mapTo","handle","createAccountsList","listReducers","BehaviorSubject","a","list$","scan","state","fn","onAddClick","next","list","item","onRemoveClick","filter","makeInputProps","input","serverResponse$","userError$","serverError$","merge","r","error$","user","server","nonNullableInput","getNonEmptyError","lostFocusError","validate","isFocused","isVisited","combineErrors","errors$","reduce","c","AppForm","withRX","props","isSending","onAddAccountClick","onRemoveAccountClick","onSubmitClick","Row","key","Button","variant","onClick","_props$","input2","accountsList","formData","switchMap","itm","submitHandler","withLatestFrom","data","from","isSending$","serverErrors$","nameProps$","passwordProps$","confirmPasswordProps$","accountsProps$","serverErrorAccount$","find","s","defaultProps","_","App","className","Boolean","window","location","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a53c55b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport interface InputCallbackProps {\n\tonBlur: () => void;\n\tonFocus: () => void;\n\tonChange: (value: string) => void;\n}\n\nexport type InputProps = {\n\tname: string;\n\tvalue: string;\n\terror: string | null;\n\tdisabled?: boolean;\n\tshowLabel?: boolean;\n} & InputCallbackProps;\n\nexport const Input: React.FC<InputProps> = ({\n\tname,\n\tvalue,\n\terror,\n\tshowLabel = true,\n\tdisabled,\n\tonBlur,\n\tonFocus,\n\tonChange\n}) => {\n\treturn (\n\t\t<div>\n\t\t\t<Form.Group as={Col}>\n\t\t\t\t{showLabel && <Form.Label>{name}</Form.Label>}\n\t\t\t\t<Form.Control\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder={name}\n\t\t\t\t\trequired\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tonBlur={onBlur}\n\t\t\t\t\tonFocus={onFocus}\n\t\t\t\t\tisInvalid={error !== null}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tonChange={(e: any) => onChange(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t{error !== null ? (\n\t\t\t\t\t<Form.Control.Feedback type=\"invalid\">\n\t\t\t\t\t\t{error}\n\t\t\t\t\t</Form.Control.Feedback>\n\t\t\t\t) : null}\n\t\t\t</Form.Group>\n\t\t</div>\n\t);\n};\n","export function validateHostname(hostname: string) {\n\tconst regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/g;\n\n\tif (hostname.match(regex)) {\n\t\treturn null;\n\t} else {\n\t\treturn \"Invalid hostname format\";\n\t}\n}\n\nexport function validateNonEmpty(value: string) {\n\tif (value === \"\") {\n\t\treturn \"Should not be empty\";\n\t} else {\n\t\treturn null;\n\t}\n}\n","import {\n\tFormModel,\n\tFormResponse,\n\tFormModelMapped,\n\tFormResponseMapped\n} from \"../model/formModel\";\nimport { validateNonEmpty, validateHostname } from \"../utils/validators\";\n\nfunction submitForm(form: FormModel) {\n\treturn new Promise<FormResponse>((resolve, _reject) => {\n\t\tsetTimeout(() => {\n\t\t\tresolve({\n\t\t\t\tisSuccess: false,\n\t\t\t\terrors: {\n\t\t\t\t\tname: {\n\t\t\t\t\t\tvalue: form.name,\n\t\t\t\t\t\terror: validateNonEmpty(form.name) || undefined\n\t\t\t\t\t},\n\t\t\t\t\tpassword: {\n\t\t\t\t\t\tvalue: form.password,\n\t\t\t\t\t\terror: validateNonEmpty(form.password) || undefined\n\t\t\t\t\t},\n\t\t\t\t\tconfirmPassword: {\n\t\t\t\t\t\tvalue: form.confirmPassword,\n\t\t\t\t\t\terror:\n\t\t\t\t\t\t\tvalidateNonEmpty(form.confirmPassword) ||\n\t\t\t\t\t\t\tform.password !== form.confirmPassword\n\t\t\t\t\t\t\t\t? \"Passwords didn't match\"\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t},\n\t\t\t\t\taccounts: form.accounts.map(account => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsitename: {\n\t\t\t\t\t\t\t\tvalue: account.sitename,\n\t\t\t\t\t\t\t\terror:\n\t\t\t\t\t\t\t\t\tvalidateNonEmpty(account.sitename) ||\n\t\t\t\t\t\t\t\t\tvalidateHostname(account.sitename) ||\n\t\t\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tusername: {\n\t\t\t\t\t\t\t\tvalue: account.username,\n\t\t\t\t\t\t\t\terror:\n\t\t\t\t\t\t\t\t\tvalidateNonEmpty(account.username) ||\n\t\t\t\t\t\t\t\t\t(account.username === \"user\"\n\t\t\t\t\t\t\t\t\t\t? \"User already exists\"\n\t\t\t\t\t\t\t\t\t\t: undefined)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\t\t}, 800);\n\t});\n}\n\nexport function submitFormMapped(\n\tform: FormModelMapped\n): Promise<FormResponseMapped> {\n\treturn submitForm(form).then(result => {\n\t\tif (result.isSuccess) {\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tisSuccess: false,\n\t\t\t\terrors: {\n\t\t\t\t\tname: result.errors.name,\n\t\t\t\t\tpassword: result.errors.password,\n\t\t\t\t\tconfirmPassword: result.errors.confirmPassword,\n\t\t\t\t\taccounts: result.errors.accounts.map((account, i) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: form.accounts[i].id,\n\t\t\t\t\t\t\tsitename: account.sitename,\n\t\t\t\t\t\t\tusername: account.username\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n}\n","import { Id } from \"../utils/makeId\";\n\nexport interface AccountModel {\n\tsitename: string;\n\tusername: string;\n}\n\nexport interface FormModel {\n\tname: string;\n\tpassword: string;\n\tconfirmPassword: string;\n\taccounts: AccountModel[];\n}\n\nexport type AccountModelMapped = { id: Id } & AccountModel;\n\nexport type FormModelMapped = { accounts: AccountModelMapped[] } & FormModel;\n\nfunction isFormAccountEqual(a: AccountModel, b: AccountModel) {\n\treturn a.username === b.username && a.sitename === b.sitename;\n}\n\nexport function isFormEqual(a: FormModel, b: FormModel) {\n\treturn (\n\t\ta.name === b.name &&\n\t\ta.password === b.password &&\n\t\ta.confirmPassword === b.confirmPassword &&\n\t\ta.accounts.length === b.accounts.length &&\n\t\ta.accounts.every((aItem, i) => isFormAccountEqual(aItem, b.accounts[i]))\n\t);\n}\n\nexport interface FormInputResponse {\n\tvalue: string;\n\terror?: string;\n}\n\nexport interface FormAccountResponse {\n\tsitename: FormInputResponse;\n\tusername: FormInputResponse;\n}\n\nexport interface FormModelResponse {\n\tname: FormInputResponse;\n\tpassword: FormInputResponse;\n\tconfirmPassword: FormInputResponse;\n\taccounts: FormAccountResponse[];\n}\n\nexport interface FormResponseFailure {\n\tisSuccess: false;\n\terrors: FormModelResponse;\n}\n\nexport function isFormResponseFailure(\n\tresponse: FormResponse\n): response is FormResponseFailure {\n\treturn !response.isSuccess;\n}\n\nexport type FormResponse =\n\t| {\n\t\t\tisSuccess: true;\n\t  }\n\t| FormResponseFailure;\n\ntype FormAccountResponseMapped = {\n\tid: Id;\n} & FormAccountResponse;\n\ntype FormModelResponseMapped = {\n\tname: FormInputResponse;\n\tpassword: FormInputResponse;\n\tconfirmPassword: FormInputResponse;\n\taccounts: FormAccountResponseMapped[];\n};\n\ntype FormResponseFailureMapped = {\n\tisSuccess: false;\n\terrors: FormModelResponseMapped;\n};\n\nexport type FormResponseMapped =\n\t| { isSuccess: true }\n\t| FormResponseFailureMapped;\n\nexport function isFormResponseFailureMapped(\n\tresponse: FormResponseMapped\n): response is FormResponseFailureMapped {\n\treturn !response.isSuccess;\n}\n","function idSection() {\n\treturn Math.random()\n\t\t.toString()\n\t\t.slice(-8);\n}\nexport function makeId() {\n\treturn `${idSection()}-${idSection()}-${idSection()}`;\n}\n\nexport type Id = string;\n","import { Observable, combineLatest } from \"rxjs\";\n\nexport function combineLatestArray<T>(items: Observable<T>[]): Observable<T[]> {\n\treturn (combineLatest as any)(...items);\n}\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Input } from \"./Input\";\nimport { withRX } from \"@devexperts/react-kit/dist/utils/with-rx2\";\nimport { createHandler } from \"@devexperts/rx-utils/dist/create-handler.utils\";\nimport {\n\tstartWith,\n\tmap,\n\tmapTo,\n\tswitchMap,\n\tfilter,\n\twithLatestFrom,\n\tscan,\n\tshareReplay\n} from \"rxjs/operators\";\nimport { combineLatest, from, Observable, merge, BehaviorSubject } from \"rxjs\";\nimport { Form, Col, Button } from \"react-bootstrap\";\nimport { submitFormMapped } from \"./services/form\";\nimport { isFormResponseFailureMapped } from \"./model/formModel\";\nimport { makeId, Id } from \"./utils/makeId\";\nimport { combineLatestArray } from \"./utils/combineLatestArray\";\nimport { validateHostname } from \"./utils/validators\";\n\ntype AccountProps = {\n\tid: Id;\n\tsitename: InputProps;\n\tusername: InputProps;\n};\n\ntype AppFormProps = {\n\tname: InputProps;\n\tpassword: InputProps;\n\tconfirmPassword: InputProps;\n\taccounts: AccountProps[];\n\tisSending: boolean;\n\tonAddAccountClick: () => void;\n\tonRemoveAccountClick: (id: Id) => void;\n\tonSubmitClick: () => void;\n};\n\ntype AccountState2 = { id: Id; sitename: InputModel2; username: InputModel2 };\n\nconst AppFormRaw: React.FC<AppFormProps> = props => {\n\tconst {\n\t\tname,\n\t\tpassword,\n\t\tconfirmPassword,\n\t\taccounts,\n\t\tisSending,\n\t\tonAddAccountClick,\n\t\tonRemoveAccountClick,\n\t\tonSubmitClick\n\t} = props;\n\treturn (\n\t\t<div>\n\t\t\t<Input name=\"Name\" {...name} disabled={isSending} />\n\t\t\t<Input name=\"Password\" {...password} disabled={isSending} />\n\t\t\t<Input\n\t\t\t\tname=\"ConfirmPassword\"\n\t\t\t\t{...confirmPassword}\n\t\t\t\tdisabled={isSending}\n\t\t\t/>\n\t\t\t<Form.Row as={Col}>\n\t\t\t\t<Col>\n\t\t\t\t\t<Form.Label>Accounts:</Form.Label>\n\t\t\t\t</Col>\n\t\t\t</Form.Row>\n\t\t\t{accounts.map(account => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={account.id}>\n\t\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tname=\"Sitename\"\n\t\t\t\t\t\t\t\t\t{...account.sitename}\n\t\t\t\t\t\t\t\t\tshowLabel={false}\n\t\t\t\t\t\t\t\t\tdisabled={isSending}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tname=\"Username\"\n\t\t\t\t\t\t\t\t\t{...account.username}\n\t\t\t\t\t\t\t\t\tshowLabel={false}\n\t\t\t\t\t\t\t\t\tdisabled={isSending}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"dark\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tonRemoveAccountClick(account.id)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={isSending}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tRemove\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Form.Row>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t<Form.Group as={Col}>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tonClick={onAddAccountClick}\n\t\t\t\t\tdisabled={isSending}\n\t\t\t\t>\n\t\t\t\t\tAdd account\n\t\t\t\t</Button>\n\t\t\t</Form.Group>\n\t\t\t<Form.Group as={Col}>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tonClick={onSubmitClick}\n\t\t\t\t\tdisabled={isSending}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t</Form.Group>\n\t\t</div>\n\t);\n};\n\ntype Operator<T> = (from: T) => T;\n\ntype InputModel2 = {\n\tvalue$: Observable<string>;\n\tisFocused$: Observable<boolean>;\n\tisVisited$: Observable<boolean>;\n\tonChange: (value: string) => void;\n\tonBlur: () => void;\n\tonFocus: () => void;\n};\n\nfunction createInputModel(): InputModel2 {\n\tconst valueHandler = createHandler<string>();\n\tconst focused = createHandler<boolean>();\n\tconst isFocused$ = focused.value$.pipe(startWith(false), shareReplay(1));\n\tconst isVisited$ = focused.value$.pipe(\n\t\tmapTo(true),\n\t\tstartWith(false),\n\t\tshareReplay(1)\n\t);\n\n\treturn {\n\t\tvalue$: valueHandler.value$.pipe(startWith(\"\"), shareReplay(1)),\n\t\tisFocused$,\n\t\tisVisited$,\n\t\tonChange: value => valueHandler.handle(value),\n\t\tonBlur: () => focused.handle(false),\n\t\tonFocus: () => focused.handle(true)\n\t};\n}\n\nfunction createAccountModel() {\n\treturn {\n\t\tsitename: createInputModel(),\n\t\tusername: createInputModel()\n\t};\n}\n\ntype ListItemWrapper<T> = {\n\tid: string;\n\titem: T;\n};\n\ntype AccountsState = ListItemWrapper<AccountState2>[];\n\ntype List = {\n\tlist$: Observable<AccountsState>;\n\tonAddClick: () => void;\n\tonRemoveClick: (id: Id) => void;\n};\n\nfunction createAccountsList(): List {\n\tconst listReducers = new BehaviorSubject<Operator<AccountsState>>(a => a);\n\tconst list$ = listReducers.pipe(\n\t\tstartWith((a: AccountsState) => a),\n\t\tscan((state, fn) => fn(state), [] as AccountsState),\n\t\tshareReplay(1)\n\t);\n\tconst onAddClick = () => {\n\t\tconst id = makeId();\n\t\tlistReducers.next(list => [\n\t\t\t...list,\n\t\t\t{ id, item: createAccountModel() } as ListItemWrapper<AccountState2>\n\t\t]);\n\t};\n\tconst onRemoveClick = (id: Id) =>\n\t\tlistReducers.next(list => list.filter(item => item.id !== id));\n\n\treturn {\n\t\tlist$,\n\t\tonAddClick,\n\t\tonRemoveClick\n\t};\n}\n\nfunction defaultInputProps(): InputProps {\n\treturn {\n\t\tvalue: \"\",\n\t\terror: null,\n\t\tonChange: (_: string) => undefined,\n\t\tonBlur: () => undefined,\n\t\tonFocus: () => undefined\n\t};\n}\n\ninterface InputProps {\n\tvalue: string;\n\terror: string | null;\n\tonChange: (value: string) => void;\n\tonBlur: () => void;\n\tonFocus: () => void;\n}\n\nfunction makeInputProps(\n\tinput: InputModel2,\n\tserverResponse$: Observable<string | undefined>,\n\tuserError$: Observable<string | null>\n): Observable<InputProps> {\n\tconst { value$, isFocused$, onFocus, onBlur, onChange } = input;\n\tconst serverError$ = merge(\n\t\tserverResponse$.pipe(\n\t\t\tmap(r => (r ? r : null)),\n\t\t\tstartWith(null)\n\t\t),\n\t\tisFocused$.pipe(\n\t\t\tfilter(focused => focused),\n\t\t\tmapTo(null)\n\t\t)\n\t);\n\n\tconst error$ = combineLatest(serverError$, userError$).pipe(\n\t\tmap(([user, server]) => user || server)\n\t);\n\n\tconst props$ = combineLatest(value$, error$).pipe(\n\t\tmap(([value, error]) => ({\n\t\t\tvalue,\n\t\t\terror,\n\t\t\tonChange,\n\t\t\tonFocus,\n\t\t\tonBlur\n\t\t}))\n\t);\n\n\treturn props$;\n}\n\nfunction nonNullableInput(\n\tinput: InputModel2,\n\tserverResponse$: Observable<string | undefined>\n): Observable<InputProps> {\n\treturn makeInputProps(input, serverResponse$, getNonEmptyError(input));\n}\n\nfunction lostFocusError(\n\tinput: InputModel2,\n\tvalidate: (value: string) => string | null\n) {\n\treturn combineLatest(input.value$, input.isFocused$, input.isVisited$).pipe(\n\t\tmap(([value, isFocused, isVisited]) =>\n\t\t\t!isFocused && isVisited ? validate(value) : null\n\t\t)\n\t);\n}\n\nfunction getNonEmptyError(input: InputModel2) {\n\treturn lostFocusError(input, value => (value === \"\" ? \"Empty!\" : null));\n}\n\nfunction shouldMatchError(input: InputModel2, input2: InputModel2) {\n\treturn combineLatest(\n\t\tinput.value$,\n\t\tinput.isFocused$,\n\t\tinput.isVisited$,\n\t\tinput2.value$\n\t).pipe(\n\t\tmap(([value, isFocused, isVisited, value2]) =>\n\t\t\tvalue !== value2 && !isFocused && isVisited\n\t\t\t\t? \"Passwords should match\"\n\t\t\t\t: null\n\t\t)\n\t);\n}\n\nfunction combineErrors(...errors$: Observable<string | null>[]) {\n\treturn combineLatestArray(errors$).pipe(\n\t\tmap(errors => errors.reduce((c, error) => c || error, null))\n\t);\n}\n\nexport const AppForm = withRX(AppFormRaw)(_props$ => {\n\tconst name = createInputModel();\n\tconst password = createInputModel();\n\tconst confirmPassword = createInputModel();\n\tconst accountsList = createAccountsList();\n\n\tconst formData = combineLatest(\n\t\tname.value$,\n\t\tpassword.value$,\n\t\tconfirmPassword.value$,\n\t\taccountsList.list$\n\t).pipe(\n\t\tswitchMap(([name, password, confirmPassword, list]) =>\n\t\t\tcombineLatestArray(\n\t\t\t\tlist.map(itm => {\n\t\t\t\t\treturn combineLatest(\n\t\t\t\t\t\titm.item.sitename.value$,\n\t\t\t\t\t\titm.item.username.value$\n\t\t\t\t\t).pipe(\n\t\t\t\t\t\tmap(([sitename, username]) => ({\n\t\t\t\t\t\t\tsitename,\n\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t\tid: itm.id\n\t\t\t\t\t\t}))\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t).pipe(\n\t\t\t\tstartWith([]),\n\t\t\t\tmap(accounts => ({\n\t\t\t\t\tname,\n\t\t\t\t\tpassword,\n\t\t\t\t\tconfirmPassword,\n\t\t\t\t\taccounts\n\t\t\t\t}))\n\t\t\t)\n\t\t)\n\t);\n\n\tconst submitHandler = createHandler<void>();\n\n\tconst serverResponse$ = submitHandler.value$\n\t\t.pipe(withLatestFrom(formData))\n\t\t.pipe(\n\t\t\tswitchMap(([_, data]) => from(submitFormMapped(data))),\n\t\t\tshareReplay(1)\n\t\t);\n\n\tconst isSending$ = merge(\n\t\tsubmitHandler.value$.pipe(mapTo(true)),\n\t\tserverResponse$.pipe(mapTo(false))\n\t);\n\n\tconst serverErrors$ = serverResponse$.pipe(\n\t\tfilter(isFormResponseFailureMapped),\n\t\tmap(response => response.errors)\n\t);\n\n\tconst nameProps$ = nonNullableInput(\n\t\tname,\n\t\tserverErrors$.pipe(map(r => r.name.error))\n\t);\n\tconst passwordProps$ = nonNullableInput(\n\t\tpassword,\n\t\tserverErrors$.pipe(map(r => r.password.error))\n\t);\n\tconst confirmPasswordProps$ = makeInputProps(\n\t\tconfirmPassword,\n\t\tserverErrors$.pipe(map(r => r.confirmPassword.error)),\n\t\tcombineErrors(\n\t\t\tgetNonEmptyError(confirmPassword),\n\t\t\tshouldMatchError(confirmPassword, password)\n\t\t)\n\t);\n\n\tconst accountsProps$ = accountsList.list$.pipe(\n\t\tswitchMap(list => {\n\t\t\tconst accounts = list.map(item => {\n\t\t\t\tconst serverErrorAccount$ = serverErrors$.pipe(\n\t\t\t\t\tmap(errors => errors.accounts.find(s => s.id === item.id))\n\t\t\t\t);\n\t\t\t\treturn combineLatest(\n\t\t\t\t\tmakeInputProps(\n\t\t\t\t\t\titem.item.sitename,\n\t\t\t\t\t\tserverErrorAccount$.pipe(\n\t\t\t\t\t\t\tmap(a => (a ? a.sitename.error : undefined))\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcombineErrors(\n\t\t\t\t\t\t\tgetNonEmptyError(item.item.sitename),\n\t\t\t\t\t\t\tlostFocusError(item.item.sitename, validateHostname)\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tnonNullableInput(\n\t\t\t\t\t\titem.item.username,\n\t\t\t\t\t\tserverErrorAccount$.pipe(\n\t\t\t\t\t\t\tmap(a => (a ? a.username.error : undefined))\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t).pipe(\n\t\t\t\t\tmap(([sitename, username]) => {\n\t\t\t\t\t\treturn { sitename, username, id: item.id };\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn combineLatestArray(accounts);\n\t\t})\n\t);\n\n\treturn {\n\t\tdefaultProps: {\n\t\t\tname: defaultInputProps(),\n\t\t\tpassword: defaultInputProps(),\n\t\t\tconfirmPassword: defaultInputProps(),\n\t\t\taccounts: [],\n\t\t\tisSending: false,\n\t\t\tonAddAccountClick: accountsList.onAddClick,\n\t\t\tonRemoveAccountClick: accountsList.onRemoveClick,\n\t\t\tonSubmitClick: () => submitHandler.handle()\n\t\t},\n\t\tprops: {\n\t\t\tname: nameProps$,\n\t\t\tpassword: passwordProps$,\n\t\t\tconfirmPassword: confirmPasswordProps$,\n\t\t\taccounts: accountsProps$,\n\t\t\tisSending: isSending$\n\t\t}\n\t};\n});\n","import React from \"react\";\nimport \"./App.css\";\nimport { AppForm } from \"./Form\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppForm />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}